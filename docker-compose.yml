version: '3.7'

services:
  # An Apodini Example Web Service
  example-web-service:
    container_name: "example-web-service"
    # We need the address so the buildagent knows where to push the image
    image: "harbor.ase.in.tum.de/ios21-monorepo/serversideexample:latest"
    build:
      context: ./
      dockerfile: ./webservice/Dockerfile
    # During development, we want extensive logging
    environment:
      LOG_LEVEL: debug
    networks:
      - backend_network
    expose:
      - "80"
    volumes:
      # Use the volume defined below to save the database file in a persistent volume to preserve it across deployments
      - type: volume
        source: database
        target: /app/database/
    # Pass the network interface (local docker network with 0.0.0.0) and the desired port to the Apodini web service
    command: ["--hostname", "0.0.0.0", "--port", "80"]
    labels:
      # The domain the service will respond to
      - "traefik.http.routers.backend.rule=Host(`localhost`)"
      # Allow request only from the predefined entry point named "web"
      - "traefik.http.routers.backend.entrypoints=web"
      # We need to define the a service and specify, on which port our server is reachable
      - "traefik.http.services.backend-service.loadbalancer.server.port=80"
      # We have to add this service to our router "backend". That's how the router knows where to forward the  requests
      - "traefik.http.routers.backend.service=backend-service"

  # Reverse Proxy to protect our service from direct access
  traefik:
    container_name: "traefik"
    image: "traefik:v2.4"
    command:
      # Enable Debug output
      - "--log.level=DEBUG"
      # Enable the api and the traefik dashboard for debugging purposes, which can be reached under 127.0.0.1:8080
      - "--api.insecure=true"
      - "--api.dashboard=true"
      # Enabling docker provider
      - "--providers.docker=true"
      # Traefik will listen to incoming request on the port 8090
      - "--entrypoints.web.address=:80"
    networks:
        - backend_network
    ports:
      # 8080 on the container is mapped to 8080 on the server/VM/your Machine.
      # Port 8080 is where the api traefik dashboard is located
      - "8080:8080"
      # Port 80 is where our example-web-service is running
      - "80:80"
    # Traefik needs the docker.sock to detect new docker container
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "31311:31311"   # For HTTP connection 
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge
  backend_network:
    driver: bridge
    name: backend_network

volumes:
  elasticsearch:
  # A volume used to host the database file from the Example Web Service
  database:
